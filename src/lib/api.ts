import createClient from "openapi-fetch";
import type { paths } from "@/types/api-schema"; // generated by openapi-typescript

const headers = new Headers({
  "Content-Type": "text/plain",
});

export const ctgApiClient = createClient<paths>({
  baseUrl: "https://clinicaltrials.gov/api/v2",
  headers: headers,
});

const getPage = async (query: string, pageToken?: string) => {
  const { data } = await ctgApiClient.GET("/studies", {
    params: {
      query: {
        "query.term": query,
        countTotal: true,
        pageSize: 500,
        pageToken,
      },
    },
  });
  return data;
};

export const getStudies = async (query: string) => {
  let firstPage = await getPage(query);
  let studies = firstPage?.studies || [];

  let nextPageToken = firstPage?.nextPageToken;

  // Download studies while there is a next page
  while (nextPageToken) {
    console.log(nextPageToken);

    let nextPage = await getPage(query, nextPageToken);
    studies = [...studies, ...(nextPage?.studies || [])];
    nextPageToken = nextPage?.nextPageToken;
  }

  // flat

  const flattenedData = studies.map((study) => {
    return {
      ...study.annotationSection?.annotationModule,
      ...study.derivedSection,
      ...study.documentSection?.largeDocumentModule,
      hasResults: study.hasResults,
      ...study.protocolSection,
      ...study.resultsSection,
    };
  });

  return flattenedData;
};

export const getStudiesByNCTIds = async (ids: string[]) => {
  const getPage = async (pageToken?: string) => {
    const { data } = await ctgApiClient.GET("/studies", {
      params: {
        query: {
          "query.id": ids.join(","),
          countTotal: true,
          pageSize: 500,
          pageToken,
        },
      },
    });
    return data;
  };

  let firstPage = await getPage();
  let studies = firstPage?.studies || [];

  let nextPageToken = firstPage?.nextPageToken;

  // Download studies while there is a next page
  while (nextPageToken) {
    console.log(nextPageToken);

    let nextPage = await getPage(nextPageToken);
    studies = [...studies, ...(nextPage?.studies || [])];
    nextPageToken = nextPage?.nextPageToken;
  }

  // flat

  const flattenedData = studies.map((study) => {
    return {
      ...study.annotationSection?.annotationModule,
      ...study.derivedSection,
      ...study.documentSection?.largeDocumentModule,
      hasResults: study.hasResults,
      ...study.protocolSection,
      ...study.resultsSection,
    };
  });

  return flattenedData;
};

export const getSingleStudyByNCTId = async (nctId: string) => {
  const { data } = await ctgApiClient.GET("/studies", {
    params: {
      query: {
        "query.id": nctId,
        pageSize: 1,
      },
    },
  });

  const study = data?.studies[0];

  if (!study) return null;

  const flattenedData = {
    ...study.annotationSection?.annotationModule,
    ...study.derivedSection,
    ...study.documentSection?.largeDocumentModule,
    hasResults: study.hasResults,
    ...study.protocolSection,
    ...study.resultsSection,
  };

  return flattenedData;
};

export type APIStudyReturn = Awaited<ReturnType<typeof getStudies>>[0];

export const getNumberOfStudiesForQuery = async (query: string) => {
  const { data } = await ctgApiClient.GET("/studies", {
    params: {
      query: {
        "query.term": query,
        countTotal: true,
        pageSize: 1,
      },
    },
  });

  return data?.totalCount || 0;
};
